<?php
require_once("Texts.php");
require_once("Install.php");
require_once("Upgrade.php");
require_once("SchemeDbParser.php");
require_once("Template.php");

function getListLangId($record){
	return $record['id'];
}

/**
 * @param SchemeDbParser $schemeDbParser
 */
function getDbConfiguration($schemeDbParser){
	include($schemeDbParser->getSection('fileConfig'));
	$listVariables=get_defined_vars();
	$fields=$schemeDbParser->getSection('configFields');
	$ret=array();
	foreach ($fields as $key=>$data){
		$data['value']=$listVariables[$key];
		if (isset($data['map'])){
			$ret[$data['map']]=$listVariables[$key];
		}
	}
	return $ret;
}

class index{
	private $template;
	private $validLanguages;
	private $schemaDbParser;
	private $linkArguments;
	private $templateFile;
	private $db_configuration;
	private $action;


	function __construct($action){
		$defaultLng=null;
		$fileSchemaDb=null;
		include("config.php");

		$this->action=$action;

		$this->template=new Template();
		$this->validLanguages=Texts::getLanguages();
		$texts=null;
		if (!isset($_GET["lng"]) || !in_array($_GET["lng"], array_map(getListLangId, $this->validLanguages))){
			$texts=new Texts($defaultLng);
		} else {
			$texts=new Texts($_GET["lng"]);
		}
		$md5=null;
		if (isset($_GET["md5"])){
			$md5=$_GET["md5"];
		}

		$this->schemaDbParser=new SchemeDbParser($this, $fileSchemaDb,$md5);
		$this->linkArguments=array('md5'=>$this->schemaDbParser->getMd5(), 'fileConfig'=>$this->schemaDbParser);
		$this->templateFile="";
		if (!in_array($action, array('index', 'install', 'upgrade'))){
			$this->showErrorPage($texts->get('Error', 'ActionTitle'), $texts->get('Error', 'ActionError'));
		}
	}

	function showErrorPage($title, $description){
		$template=new Template();
		$template->set('error_title', $title);
		$template->set('error_description', $description);
		$template->setTemplate("template/Error.html");
		echo $template->render();
		die();
	}

	function showError($title, $description){
		$this->template->set('error_title', $title);
		$this->template->set('error_description', $description);
	}

	/**
	 * @return Template
	 */
	function getTemplate(){
		return $this->template;
	}

	function getLinkArguments(){
		return $this->linkArguments;
	}

	function show(){
		echo $this->template->render();
	}

	function chargeConfigResponse(){
		$listFields=$this->schemaDbParser->getSection('configFields');
		$return='run';
		$this->db_configuration=array();
		foreach ($listFields as $field=>$data){
			$field_request="config_".$field;
			if (isset($_POST[$field_request]) && $_POST[$field_request]!=''){
				$data['value']=$_POST[$field_request];
				if (isset($data['map'])){
					$this->db_configuration[$data['map']]=$_POST[$field_request];
				}
			} else if (!isset($data['required']) || $data['required']){
				$data['error']=str_replace('{field}', $field, Texts::getShared()->get('Error', 'required'));
				$return='config';
			}
		}

		return $return;
	}

	function checkDataBaseConfig(){
		if ($this->db_configuration['db_type']=='mysql'){

			if (!($con=mysql_connect($this->db_configuration['db_host'], $this->db_configuration['db_user'], $this->db_configuration['db_password']))){
				$this->showError(Texts::getShared()->get('Error', 'db'), mysql_error());
				return null;
			}

			if (!mysql_select_db($this->db_configuration['db_database'], $con)){
				$this->showError(Texts::getShared()->get('Error', 'db'), mysql_error());
				return null;
			}
		} else {
			return null;
		}
		return new MySQL($con);
	}

	function runConfiguration(){
		$listFields=$this->schemaDbParser->getSection('configFields');
		$texts=Texts::getShared();
		foreach ($listFields as $field=>$data){
			$data['name']=$texts->get('config', 'name_'.$field);
		}

		$this->template->set('listFields', $listFields);
	}

	function generateFileConfig(){
		$listFields=$this->schemaDbParser->getSection('configFields');
		$configFileContents="<?php\n Configuration autogenerated by AutoInstaller\n\n";
		foreach($listFields as $key=>$data){
			$configFileContents.="$$key='".$data['value']."'\n";
		}

		file_put_contents($this->schemaDbParser->getSection('fileConfig'), $configFileContents);
	}

	function dispatch(){
		if ($this->action=='index'){
			$texts=Texts::getShared();
			$this->template->set('title', $texts->get('index', 'title'));
			$this->template->set('description', $texts->get('index', 'description'));
			$this->template->set('install', $texts->get('index', 'install'));
			$this->template->set('install_description', $texts->get('index', 'install_description'));
			$this->template->set('upgrade', $texts->get('index', 'upgrade'));
			$this->template->set('upgrade_description', $texts->get('index', 'upgrade_description'));
		} else{
			$step='config';
			if (isset($_GET['step'])){
				$step=$_GET['step'];
			}

			if (file_exists($this->schemaDbParser->getSection('fileConfig'))){
				$this->db_configuration=getDbConfiguration($this->schemaDbParser);
			}

			if ($step=='saveConfig'){
				$step=$this->chargeConfigResponse();
				if ($step=='run'){
					$this->generateFileConfig();
				}
			}
			$db=null;

			if ($step!='config'){
				if (!($db=$this->checkDataBaseConfig())){
					$step='config';
				}
			}

			if ($step=='config'){
				$this->runConfiguration();
			}
			if ($step!='config'){
				$obj=null;
				if ($this->action=='upgrade'){
					$obj=new Upgrade($this, $this->schemaDbParser, $db);
				} else {
					$obj=new Install($this, $this->schemaDbParser, $db);
				}
				$obj->dispatch($step);
			}
		}
	}
}

$action='index';
if (isset($_GET['action'])){
	$action=$_GET['action'];
}

$index=new index($action);
$index->dispatch();
$index->show();